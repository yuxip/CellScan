//
// File generated by /usr/local/bin/root_527/bin/rootcint at Wed Apr  4 11:22:50 2012

// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "MyCellMgrDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void MyCell_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_MyCell(void *p = 0);
   static void *newArray_MyCell(Long_t size, void *p);
   static void delete_MyCell(void *p);
   static void deleteArray_MyCell(void *p);
   static void destruct_MyCell(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyCell*)
   {
      ::MyCell *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyCell >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyCell", ::MyCell::Class_Version(), "/home/yuxip/FMS/CellScan/include/MyCell.h", 31,
                  typeid(::MyCell), DefineBehavior(ptr, ptr),
                  &::MyCell::Dictionary, isa_proxy, 4,
                  sizeof(::MyCell) );
      instance.SetNew(&new_MyCell);
      instance.SetNewArray(&newArray_MyCell);
      instance.SetDelete(&delete_MyCell);
      instance.SetDeleteArray(&deleteArray_MyCell);
      instance.SetDestructor(&destruct_MyCell);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyCell*)
   {
      return GenerateInitInstanceLocal((::MyCell*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyCell*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyCellRunDep_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_MyCellRunDep(void *p = 0);
   static void *newArray_MyCellRunDep(Long_t size, void *p);
   static void delete_MyCellRunDep(void *p);
   static void deleteArray_MyCellRunDep(void *p);
   static void destruct_MyCellRunDep(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyCellRunDep*)
   {
      ::MyCellRunDep *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyCellRunDep >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyCellRunDep", ::MyCellRunDep::Class_Version(), "/home/yuxip/FMS/CellScan/include/MyCellRunDep.h", 23,
                  typeid(::MyCellRunDep), DefineBehavior(ptr, ptr),
                  &::MyCellRunDep::Dictionary, isa_proxy, 4,
                  sizeof(::MyCellRunDep) );
      instance.SetNew(&new_MyCellRunDep);
      instance.SetNewArray(&newArray_MyCellRunDep);
      instance.SetDelete(&delete_MyCellRunDep);
      instance.SetDeleteArray(&deleteArray_MyCellRunDep);
      instance.SetDestructor(&destruct_MyCellRunDep);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyCellRunDep*)
   {
      return GenerateInitInstanceLocal((::MyCellRunDep*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyCellRunDep*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyCellEvt_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_MyCellEvt(void *p = 0);
   static void *newArray_MyCellEvt(Long_t size, void *p);
   static void delete_MyCellEvt(void *p);
   static void deleteArray_MyCellEvt(void *p);
   static void destruct_MyCellEvt(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyCellEvt*)
   {
      ::MyCellEvt *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyCellEvt >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyCellEvt", ::MyCellEvt::Class_Version(), "/home/yuxip/FMS/CellScan/include/MyCellEvt.h", 8,
                  typeid(::MyCellEvt), DefineBehavior(ptr, ptr),
                  &::MyCellEvt::Dictionary, isa_proxy, 4,
                  sizeof(::MyCellEvt) );
      instance.SetNew(&new_MyCellEvt);
      instance.SetNewArray(&newArray_MyCellEvt);
      instance.SetDelete(&delete_MyCellEvt);
      instance.SetDeleteArray(&deleteArray_MyCellEvt);
      instance.SetDestructor(&destruct_MyCellEvt);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyCellEvt*)
   {
      return GenerateInitInstanceLocal((::MyCellEvt*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyCellEvt*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyCellMgr_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_MyCellMgr(void *p = 0);
   static void *newArray_MyCellMgr(Long_t size, void *p);
   static void delete_MyCellMgr(void *p);
   static void deleteArray_MyCellMgr(void *p);
   static void destruct_MyCellMgr(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyCellMgr*)
   {
      ::MyCellMgr *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyCellMgr >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyCellMgr", ::MyCellMgr::Class_Version(), "/home/yuxip/FMS/CellScan/include/MyCellMgr.h", 29,
                  typeid(::MyCellMgr), DefineBehavior(ptr, ptr),
                  &::MyCellMgr::Dictionary, isa_proxy, 4,
                  sizeof(::MyCellMgr) );
      instance.SetNew(&new_MyCellMgr);
      instance.SetNewArray(&newArray_MyCellMgr);
      instance.SetDelete(&delete_MyCellMgr);
      instance.SetDeleteArray(&deleteArray_MyCellMgr);
      instance.SetDestructor(&destruct_MyCellMgr);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyCellMgr*)
   {
      return GenerateInitInstanceLocal((::MyCellMgr*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyCellMgr*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *MyCell::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyCell::Class_Name()
{
   return "MyCell";
}

//______________________________________________________________________________
const char *MyCell::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyCell*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyCell::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyCell*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyCell::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyCell*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyCell::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyCell*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyCellRunDep::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyCellRunDep::Class_Name()
{
   return "MyCellRunDep";
}

//______________________________________________________________________________
const char *MyCellRunDep::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyCellRunDep*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyCellRunDep::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyCellRunDep*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyCellRunDep::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyCellRunDep*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyCellRunDep::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyCellRunDep*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyCellEvt::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyCellEvt::Class_Name()
{
   return "MyCellEvt";
}

//______________________________________________________________________________
const char *MyCellEvt::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyCellEvt*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyCellEvt::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyCellEvt*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyCellEvt::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyCellEvt*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyCellEvt::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyCellEvt*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyCellMgr::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyCellMgr::Class_Name()
{
   return "MyCellMgr";
}

//______________________________________________________________________________
const char *MyCellMgr::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyCellMgr*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyCellMgr::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyCellMgr*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyCellMgr::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyCellMgr*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyCellMgr::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyCellMgr*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void MyCellMgr::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyCellMgr.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyCellMgr::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyCellMgr::Class(),this);
   }
}

//______________________________________________________________________________
void MyCellMgr::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MyCellMgr.
      TClass *R__cl = ::MyCellMgr::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*VecMyCell", &VecMyCell);
      R__insp.Inspect(R__cl, R__parent, "mOutfile", &mOutfile);
      mOutfile.ShowMembers(R__insp, strcat(R__parent,"mOutfile.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "*mDir", &mDir);
      R__insp.Inspect(R__cl, R__parent, "*mGain", &mGain);
      R__insp.Inspect(R__cl, R__parent, "*mGcor", &mGcor);
      R__insp.Inspect(R__cl, R__parent, "*mGeom", &mGeom);
      R__insp.Inspect(R__cl, R__parent, "mRun", &mRun);
      R__insp.Inspect(R__cl, R__parent, "*fout", &fout);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyCellMgr(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MyCellMgr : new ::MyCellMgr;
   }
   static void *newArray_MyCellMgr(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MyCellMgr[nElements] : new ::MyCellMgr[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyCellMgr(void *p) {
      delete ((::MyCellMgr*)p);
   }
   static void deleteArray_MyCellMgr(void *p) {
      delete [] ((::MyCellMgr*)p);
   }
   static void destruct_MyCellMgr(void *p) {
      typedef ::MyCellMgr current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyCellMgr

//______________________________________________________________________________
void MyCell::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyCell.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyCell::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyCell::Class(),this);
   }
}

//______________________________________________________________________________
void MyCell::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MyCell.
      TClass *R__cl = ::MyCell::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "mNstb", &mNstb);
      R__insp.Inspect(R__cl, R__parent, "mRow", &mRow);
      R__insp.Inspect(R__cl, R__parent, "mCol", &mCol);
      R__insp.Inspect(R__cl, R__parent, "mWidthx", &mWidthx);
      R__insp.Inspect(R__cl, R__parent, "mWidthy", &mWidthy);
      R__insp.Inspect(R__cl, R__parent, "mEta", &mEta);
      R__insp.Inspect(R__cl, R__parent, "mPhi", &mPhi);
      R__insp.Inspect(R__cl, R__parent, "mGain", &mGain);
      R__insp.Inspect(R__cl, R__parent, "mGcor", &mGcor);
      R__insp.Inspect(R__cl, R__parent, "*mGeom", &mGeom);
      R__insp.Inspect(R__cl, R__parent, "mCellname", &mCellname);
      mCellname.ShowMembers(R__insp, strcat(R__parent,"mCellname.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "*mIterhis", &mIterhis);
      R__insp.Inspect(R__cl, R__parent, "*mcevt", &mcevt);
      R__insp.Inspect(R__cl, R__parent, "*VecMyCellRunDep", &VecMyCellRunDep);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyCell(void *p) {
      return  p ? new(p) ::MyCell : new ::MyCell;
   }
   static void *newArray_MyCell(Long_t nElements, void *p) {
      return p ? new(p) ::MyCell[nElements] : new ::MyCell[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyCell(void *p) {
      delete ((::MyCell*)p);
   }
   static void deleteArray_MyCell(void *p) {
      delete [] ((::MyCell*)p);
   }
   static void destruct_MyCell(void *p) {
      typedef ::MyCell current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyCell

//______________________________________________________________________________
void MyCellRunDep::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyCellRunDep.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyCellRunDep::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyCellRunDep::Class(),this);
   }
}

//______________________________________________________________________________
void MyCellRunDep::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MyCellRunDep.
      TClass *R__cl = ::MyCellRunDep::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "mCellrdname", &mCellrdname);
      mCellrdname.ShowMembers(R__insp, strcat(R__parent,"mCellrdname.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "mNstb", &mNstb);
      R__insp.Inspect(R__cl, R__parent, "mRow", &mRow);
      R__insp.Inspect(R__cl, R__parent, "mCol", &mCol);
      R__insp.Inspect(R__cl, R__parent, "mRun", &mRun);
      R__insp.Inspect(R__cl, R__parent, "*mAdc", &mAdc);
      R__insp.Inspect(R__cl, R__parent, "*mLed", &mLed);
      R__insp.Inspect(R__cl, R__parent, "*mLedEvt", &mLedEvt);
      R__insp.Inspect(R__cl, R__parent, "*mMyCellTr", &mMyCellTr);
      R__insp.Inspect(R__cl, R__parent, "mStatus", &mStatus);
      R__insp.Inspect(R__cl, R__parent, "*mMyCevt", &mMyCevt);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyCellRunDep(void *p) {
      return  p ? new(p) ::MyCellRunDep : new ::MyCellRunDep;
   }
   static void *newArray_MyCellRunDep(Long_t nElements, void *p) {
      return p ? new(p) ::MyCellRunDep[nElements] : new ::MyCellRunDep[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyCellRunDep(void *p) {
      delete ((::MyCellRunDep*)p);
   }
   static void deleteArray_MyCellRunDep(void *p) {
      delete [] ((::MyCellRunDep*)p);
   }
   static void destruct_MyCellRunDep(void *p) {
      typedef ::MyCellRunDep current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyCellRunDep

//______________________________________________________________________________
void MyCellEvt::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyCellEvt.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyCellEvt::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyCellEvt::Class(),this);
   }
}

//______________________________________________________________________________
void MyCellEvt::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MyCellEvt.
      TClass *R__cl = ::MyCellEvt::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "M", &M);
      R__insp.Inspect(R__cl, R__parent, "E", &E);
      R__insp.Inspect(R__cl, R__parent, "E1", &E1);
      R__insp.Inspect(R__cl, R__parent, "E2", &E2);
      R__insp.Inspect(R__cl, R__parent, "X1", &X1);
      R__insp.Inspect(R__cl, R__parent, "X2", &X2);
      R__insp.Inspect(R__cl, R__parent, "Y1", &Y1);
      R__insp.Inspect(R__cl, R__parent, "Y2", &Y2);
      R__insp.Inspect(R__cl, R__parent, "Eta", &Eta);
      R__insp.Inspect(R__cl, R__parent, "Phi", &Phi);
      R__insp.Inspect(R__cl, R__parent, "Eta1", &Eta1);
      R__insp.Inspect(R__cl, R__parent, "Eta2", &Eta2);
      R__insp.Inspect(R__cl, R__parent, "Phi1", &Phi1);
      R__insp.Inspect(R__cl, R__parent, "Phi2", &Phi2);
      R__insp.Inspect(R__cl, R__parent, "Z", &Z);
      R__insp.Inspect(R__cl, R__parent, "C12", &C12);
      R__insp.Inspect(R__cl, R__parent, "Rnum", &Rnum);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyCellEvt(void *p) {
      return  p ? new(p) ::MyCellEvt : new ::MyCellEvt;
   }
   static void *newArray_MyCellEvt(Long_t nElements, void *p) {
      return p ? new(p) ::MyCellEvt[nElements] : new ::MyCellEvt[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyCellEvt(void *p) {
      delete ((::MyCellEvt*)p);
   }
   static void deleteArray_MyCellEvt(void *p) {
      delete [] ((::MyCellEvt*)p);
   }
   static void destruct_MyCellEvt(void *p) {
      typedef ::MyCellEvt current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyCellEvt

/********************************************************
* /home/yuxip/FMS/CellScan/src/MyCellMgrDict.cpp
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableMyCellMgrDict();

extern "C" void G__set_cpp_environmentMyCellMgrDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("MyCellMgr.h");
  G__add_compiledheader("MyCell.h");
  G__add_compiledheader("MyCellRunDep.h");
  G__add_compiledheader("MyCellEvt.h");
  G__cpp_reset_tagtableMyCellMgrDict();
}
#include <new>
extern "C" int G__cpp_dllrevMyCellMgrDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MyCell */
static int G__MyCellMgrDict_248_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyCell* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyCell[n];
     } else {
       p = new((void*) gvp) MyCell[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyCell;
     } else {
       p = new((void*) gvp) MyCell;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyCellMgrDictLN_MyCell));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_248_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyCell* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 7
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MyCell(
(const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (CalibStr*) G__int(libp->para[4]), (CalibStr*) G__int(libp->para[5])
, (Geom*) G__int(libp->para[6]));
   } else {
     p = new((void*) gvp) MyCell(
(const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (CalibStr*) G__int(libp->para[4]), (CalibStr*) G__int(libp->para[5])
, (Geom*) G__int(libp->para[6]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyCellMgrDictLN_MyCell));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_248_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MyCell*) G__getstructoffset())->GetNstb());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_248_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MyCell*) G__getstructoffset())->GetRow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_248_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MyCell*) G__getstructoffset())->GetCol());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_248_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((MyCell*) G__getstructoffset())->GetEta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_248_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((MyCell*) G__getstructoffset())->GetPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_248_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((MyCell*) G__getstructoffset())->GetCellWidthX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_248_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((MyCell*) G__getstructoffset())->GetCellWidthY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_248_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MyCell*) G__getstructoffset())->GetPionSample(*((TCut*) G__int(libp->para[0])), (char*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_248_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MyCell*) G__getstructoffset())->GetPionSample(*((TCut*) G__int(libp->para[0])), (Long_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_248_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MyCell*) G__getstructoffset())->GetMyCellrd((Long_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_248_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((MyCell*) G__getstructoffset())->GetPartnerByXY((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Long_t) G__int(libp->para[2]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_248_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((MyCell*) G__getstructoffset())->GetPartnerByEtaPhi((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Long_t) G__int(libp->para[2]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_248_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MyCell*) G__getstructoffset())->GetAdcSpectrum((Long_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_248_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MyCell*) G__getstructoffset())->GetLEDSpectrum((Long_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_248_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MyCell*) G__getstructoffset())->GetLEDvsEvt((Long_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_248_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MyCell*) G__getstructoffset())->GetNth((Long_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_248_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((MyCell*) G__getstructoffset())->GetStatusBit((Long_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_248_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((MyCell*) G__getstructoffset())->GetGain());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_248_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((MyCell*) G__getstructoffset())->GetGainCor());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_248_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MyCell*) G__getstructoffset())->GetRunDepArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_248_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MyCell*) G__getstructoffset())->Legal((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_248_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MyCell*) G__getstructoffset())->SetNstb((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_248_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MyCell*) G__getstructoffset())->SetRow((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_248_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MyCell*) G__getstructoffset())->SetCol((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_248_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MyCell*) G__getstructoffset())->SetCellWidthXY((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_248_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MyCell*) G__getstructoffset())->SetCellEtaPhi((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_248_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MyCell*) G__getstructoffset())->SetGain((CalibStr*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_248_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MyCell*) G__getstructoffset())->SetGainCor((CalibStr*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_248_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MyCell*) G__getstructoffset())->SetGeom((Geom*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_248_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MyCell*) G__getstructoffset())->SetStatusBit((Long_t) G__int(libp->para[0]), (UChar_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_248_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MyCell*) G__getstructoffset())->InitMyCellRunDep((Long_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_248_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MyCell*) G__getstructoffset())->InsertMyCellRunDep((MyCellRunDep*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_248_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyCell::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_248_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyCell::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_248_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyCell::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_248_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyCell::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_248_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyCell*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_248_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyCell::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_248_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyCell::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_248_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyCell::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_248_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyCell::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MyCellMgrDict_248_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyCell* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyCell(*(MyCell*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyCellMgrDictLN_MyCell));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyCell G__TMyCell;
static int G__MyCellMgrDict_248_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyCell*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyCell*) (soff+(sizeof(MyCell)*i)))->~G__TMyCell();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyCell*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyCell*) (soff))->~G__TMyCell();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MyCellMgrDict_248_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyCell* dest = (MyCell*) G__getstructoffset();
   *dest = *(MyCell*) libp->para[0].ref;
   const MyCell& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyCellRunDep */
static int G__MyCellMgrDict_249_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyCellRunDep* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyCellRunDep[n];
     } else {
       p = new((void*) gvp) MyCellRunDep[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyCellRunDep;
     } else {
       p = new((void*) gvp) MyCellRunDep;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyCellMgrDictLN_MyCellRunDep));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_249_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyCellRunDep* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MyCellRunDep((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) MyCellRunDep((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyCellMgrDictLN_MyCellRunDep));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_249_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MyCellRunDep*) G__getstructoffset())->GetPionSample(*((TCut*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_249_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MyCellRunDep*) G__getstructoffset())->GetAdcSpectrum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_249_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MyCellRunDep*) G__getstructoffset())->GetLEDSpectrum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_249_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MyCellRunDep*) G__getstructoffset())->GetLEDvsEvt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_249_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MyCellRunDep*) G__getstructoffset())->GetRunNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_249_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((MyCellRunDep*) G__getstructoffset())->GetStatusBit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_249_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MyCellRunDep*) G__getstructoffset())->GetMyCellEvt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_249_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MyCellRunDep*) G__getstructoffset())->SetMyCellEvt((MyCellEvt*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_249_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MyCellRunDep*) G__getstructoffset())->SetName((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_249_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MyCellRunDep*) G__getstructoffset())->SetStatusBit((UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_249_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MyCellRunDep*) G__getstructoffset())->SetPionSample((TTree*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_249_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MyCellRunDep*) G__getstructoffset())->InitTree((MyCellEvt*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_249_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyCellRunDep::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_249_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyCellRunDep::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_249_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyCellRunDep::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_249_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyCellRunDep::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_249_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyCellRunDep*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_249_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyCellRunDep::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_249_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyCellRunDep::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_249_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyCellRunDep::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_249_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyCellRunDep::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MyCellMgrDict_249_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyCellRunDep* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyCellRunDep(*(MyCellRunDep*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyCellMgrDictLN_MyCellRunDep));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyCellRunDep G__TMyCellRunDep;
static int G__MyCellMgrDict_249_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyCellRunDep*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyCellRunDep*) (soff+(sizeof(MyCellRunDep)*i)))->~G__TMyCellRunDep();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyCellRunDep*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyCellRunDep*) (soff))->~G__TMyCellRunDep();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MyCellMgrDict_249_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyCellRunDep* dest = (MyCellRunDep*) G__getstructoffset();
   *dest = *(MyCellRunDep*) libp->para[0].ref;
   const MyCellRunDep& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyCellEvt */
static int G__MyCellMgrDict_250_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyCellEvt* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyCellEvt[n];
     } else {
       p = new((void*) gvp) MyCellEvt[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyCellEvt;
     } else {
       p = new((void*) gvp) MyCellEvt;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyCellMgrDictLN_MyCellEvt));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_250_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyCellEvt::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_250_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyCellEvt::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_250_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyCellEvt::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_250_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyCellEvt::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_250_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyCellEvt*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_250_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyCellEvt::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_250_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyCellEvt::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_250_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyCellEvt::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_250_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyCellEvt::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MyCellMgrDict_250_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyCellEvt* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyCellEvt(*(MyCellEvt*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyCellMgrDictLN_MyCellEvt));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyCellEvt G__TMyCellEvt;
static int G__MyCellMgrDict_250_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyCellEvt*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyCellEvt*) (soff+(sizeof(MyCellEvt)*i)))->~G__TMyCellEvt();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyCellEvt*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyCellEvt*) (soff))->~G__TMyCellEvt();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MyCellMgrDict_250_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyCellEvt* dest = (MyCellEvt*) G__getstructoffset();
   *dest = *(MyCellEvt*) libp->para[0].ref;
   const MyCellEvt& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyCellMgr */
static int G__MyCellMgrDict_255_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyCellMgr* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyCellMgr[n];
     } else {
       p = new((void*) gvp) MyCellMgr[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyCellMgr;
     } else {
       p = new((void*) gvp) MyCellMgr;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyCellMgrDictLN_MyCellMgr));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_255_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyCellMgr* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MyCellMgr(
(Long_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) MyCellMgr(
(Long_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyCellMgrDictLN_MyCellMgr));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_255_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MyCellMgr*) G__getstructoffset())->InitFiles());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_255_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MyCellMgr*) G__getstructoffset())->InitMyCells());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_255_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MyCellMgr*) G__getstructoffset())->ReadADC((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_255_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MyCellMgr*) G__getstructoffset())->ReadOutput((const char*) G__int(libp->para[0]), *((TCut*) G__int(libp->para[1]))
, (Bool_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_255_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MyCellMgr*) G__getstructoffset())->SetCellStatus((Float_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_255_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MyCellMgr*) G__getstructoffset())->GetPointXY((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]), *(Float_t*) G__Floatref(&libp->para[3])
, *(Int_t*) G__Intref(&libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_255_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MyCellMgr*) G__getstructoffset())->GetPartnerByXY((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Long_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_255_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MyCellMgr*) G__getstructoffset())->GetTrigRate((Long_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3])
, (Int_t (*)[34][17]) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_255_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MyCellMgr*) G__getstructoffset())->InsertMyCell((MyCell*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_255_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MyCellMgr*) G__getstructoffset())->GetCell((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_255_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MyCellMgr*) G__getstructoffset())->WriteCellArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_255_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MyCellMgr*) G__getstructoffset())->Legal((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_255_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyCellMgr::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_255_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyCellMgr::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_255_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyCellMgr::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_255_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyCellMgr::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_255_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MyCellMgr*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_255_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyCellMgr*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_255_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyCellMgr*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_255_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyCellMgr*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_255_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyCellMgr::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_255_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyCellMgr::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_255_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyCellMgr::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyCellMgrDict_255_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyCellMgr::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MyCellMgrDict_255_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyCellMgr* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyCellMgr(*(MyCellMgr*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyCellMgrDictLN_MyCellMgr));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyCellMgr G__TMyCellMgr;
static int G__MyCellMgrDict_255_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyCellMgr*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyCellMgr*) (soff+(sizeof(MyCellMgr)*i)))->~G__TMyCellMgr();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyCellMgr*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyCellMgr*) (soff))->~G__TMyCellMgr();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MyCellMgrDict_255_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyCellMgr* dest = (MyCellMgr*) G__getstructoffset();
   *dest = *(MyCellMgr*) libp->para[0].ref;
   const MyCellMgr& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MyCell */

/* MyCellRunDep */

/* MyCellEvt */

/* MyCellMgr */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncMyCellMgrDict {
 public:
  G__Sizep2memfuncMyCellMgrDict(): p(&G__Sizep2memfuncMyCellMgrDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncMyCellMgrDict::*p)();
};

size_t G__get_sizep2memfuncMyCellMgrDict()
{
  G__Sizep2memfuncMyCellMgrDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceMyCellMgrDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MyCellMgrDictLN_MyCell))) {
     MyCell *G__Lderived;
     G__Lderived=(MyCell*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MyCellMgrDictLN_MyCell),G__get_linked_tagnum(&G__MyCellMgrDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MyCellMgrDictLN_MyCellRunDep))) {
     MyCellRunDep *G__Lderived;
     G__Lderived=(MyCellRunDep*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MyCellMgrDictLN_MyCellRunDep),G__get_linked_tagnum(&G__MyCellMgrDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MyCellMgrDictLN_MyCellEvt))) {
     MyCellEvt *G__Lderived;
     G__Lderived=(MyCellEvt*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MyCellMgrDictLN_MyCellEvt),G__get_linked_tagnum(&G__MyCellMgrDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableMyCellMgrDict() {

   /* Setting up typedef entry */
   G__search_typename2("UChar_t",98,-1,0,-1);
   G__setnewtype(-1,"Unsigned Character 1 byte (unsigned char)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Long_t",108,-1,0,-1);
   G__setnewtype(-1,"Signed long integer 8 bytes (long)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<TSchemaHelper>",117,G__get_linked_tagnum(&G__MyCellMgrDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MyCellMgrDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyCellMgrDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MyCellMgrDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyCellMgrDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__MyCellMgrDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__MyCellMgrDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__MyCellMgrDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__MyCellMgrDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__MyCellMgrDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<UInt_t>",117,G__get_linked_tagnum(&G__MyCellMgrDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TString>",117,G__get_linked_tagnum(&G__MyCellMgrDictLN_vectorlETStringcOallocatorlETStringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MyCellMgrDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyCellMgrDictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MyCellMgrDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyCellMgrDictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Int_t (*)[34][17]",49,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__MyCellMgrDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__MyCellMgrDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__MyCellMgrDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__MyCellMgrDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__MyCellMgrDictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__MyCellMgrDictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__MyCellMgrDictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__MyCellMgrDictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__MyCellMgrDictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__MyCellMgrDictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__MyCellMgrDictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__MyCellMgrDictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__MyCellMgrDictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__MyCellMgrDictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__MyCellMgrDictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__MyCellMgrDictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__MyCellMgrDictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__MyCellMgrDictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__MyCellMgrDictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__MyCellMgrDictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__MyCellMgrDictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MyCell */
static void G__setup_memvarMyCell(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MyCellMgrDictLN_MyCell));
   { MyCell *p; p=(MyCell*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"mNstb=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"mRow=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"mCol=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"mWidthx=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"mWidthy=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"mEta=",0,"cell pseudorapidity");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"mPhi=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"mGain=",0,"base gain");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"mGcor=",0,"current gain correction");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MyCellMgrDictLN_Geom),-1,-1,4,"mGeom=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MyCellMgrDictLN_TString),-1,-1,4,"mCellname=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MyCellMgrDictLN_TGraph),-1,-1,4,"mIterhis=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MyCellMgrDictLN_MyCellEvt),-1,-1,4,"mcevt=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MyCellMgrDictLN_TObjArray),-1,-1,4,"VecMyCellRunDep=",0,"->");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MyCellMgrDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyCellRunDep */
static void G__setup_memvarMyCellRunDep(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MyCellMgrDictLN_MyCellRunDep));
   { MyCellRunDep *p; p=(MyCellRunDep*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MyCellMgrDictLN_TString),-1,-1,4,"mCellrdname=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"mNstb=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"mRow=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"mCol=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("Long_t"),-1,4,"mRun=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MyCellMgrDictLN_TH1F),-1,-1,4,"mAdc=",0,"->");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MyCellMgrDictLN_TH1F),-1,-1,4,"mLed=",0,"->");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MyCellMgrDictLN_TH2F),-1,-1,4,"mLedEvt=",0,"->");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MyCellMgrDictLN_TTree),-1,-1,4,"mMyCellTr=",0,"->");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,4,"mStatus=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MyCellMgrDictLN_MyCellEvt),-1,-1,4,"mMyCevt=",0,"!			");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MyCellMgrDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyCellEvt */
static void G__setup_memvarMyCellEvt(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MyCellMgrDictLN_MyCellEvt));
   { MyCellEvt *p; p=(MyCellEvt*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->M)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"M=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->E)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"E=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->E1)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"E1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->E2)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"E2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->X1)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"X1=",0,"X coordinate of the photon(higher E) associated with the current cell");
   G__memvar_setup((void*)((long)(&p->X2)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"X2=",0,"X coordinate of the partner photon");
   G__memvar_setup((void*)((long)(&p->Y1)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Y1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Y2)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Y2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Eta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Eta=",0,"pseudoradipity of the pion");
   G__memvar_setup((void*)((long)(&p->Phi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Eta1)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Eta1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Eta2)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Eta2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Phi1)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Phi1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Phi2)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Phi2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Z)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Z=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->C12)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"C12=",0,"cos(opening angle)");
   G__memvar_setup((void*)((long)(&p->Rnum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Rnum=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MyCellMgrDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyCellMgr */
static void G__setup_memvarMyCellMgr(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MyCellMgrDictLN_MyCellMgr));
   { MyCellMgr *p; p=(MyCellMgr*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->VecMyCell)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__MyCellMgrDictLN_TObjArray),-1,-1,1,"VecMyCell=",0,"->");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MyCellMgrDictLN_TString),-1,-1,4,"mOutfile=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MyCellMgrDictLN_TDirectory),-1,-1,4,"mDir=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MyCellMgrDictLN_CalibStr),-1,-1,4,"mGain=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MyCellMgrDictLN_CalibStr),-1,-1,4,"mGcor=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MyCellMgrDictLN_Geom),-1,-1,4,"mGeom=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("Long_t"),-1,4,"mRun=",0,"it's very memory-consuming to write multiple MyCellRunDep objects together for each cell");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MyCellMgrDictLN_TFile),-1,-1,4,"fout=",0,"so I decided to make MyCells.root on a run-by-run basis");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MyCellMgrDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarMyCellMgrDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMyCell(void) {
   /* MyCell */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MyCellMgrDictLN_MyCell));
   G__memfunc_setup("MyCell",582,G__MyCellMgrDict_248_0_1, 105, G__get_linked_tagnum(&G__MyCellMgrDictLN_MyCell), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MyCell",582,G__MyCellMgrDict_248_0_2, 105, G__get_linked_tagnum(&G__MyCellMgrDictLN_MyCell), -1, 0, 7, 1, 1, 0, 
"C - - 10 - name i - 'Int_t' 0 - nstb "
"i - 'Int_t' 0 - row i - 'Int_t' 0 - col "
"U 'CalibStr' - 0 - gain U 'CalibStr' - 0 - gcor "
"U 'Geom' - 0 - p_geom", "name e.g.: Cellr0_c0_n1", (void*) NULL, 0);
   G__memfunc_setup("GetNstb",695,G__MyCellMgrDict_248_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", "starts from 1;", (void*) NULL, 0);
   G__memfunc_setup("GetRow",600,G__MyCellMgrDict_248_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", "starts from 0;", (void*) NULL, 0);
   G__memfunc_setup("GetCol",574,G__MyCellMgrDict_248_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", "startf from 0;", (void*) NULL, 0);
   G__memfunc_setup("GetEta",570,G__MyCellMgrDict_248_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPhi",577,G__MyCellMgrDict_248_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCellWidthX",1272,G__MyCellMgrDict_248_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCellWidthY",1273,G__MyCellMgrDict_248_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPionSample",1304,G__MyCellMgrDict_248_0_10, 85, G__get_linked_tagnum(&G__MyCellMgrDictLN_TTree), -1, 0, 2, 1, 1, 0, 
"u 'TCut' - 0 - cuts C - - 0 - runlist", "assemble the pion sample from a set of runs		", (void*) NULL, 0);
   G__memfunc_setup("GetPionSample",1304,G__MyCellMgrDict_248_0_11, 85, G__get_linked_tagnum(&G__MyCellMgrDictLN_TTree), -1, 0, 2, 1, 1, 0, 
"u 'TCut' - 0 - cuts l - 'Long_t' 0 - runnum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMyCellrd",1084,G__MyCellMgrDict_248_0_12, 85, G__get_linked_tagnum(&G__MyCellMgrDictLN_MyCellRunDep), -1, 0, 1, 1, 1, 0, "l - 'Long_t' 0 - runnum", "get MyCellRunDep object for run \"runnum\"", (void*) NULL, 0);
   G__memfunc_setup("GetPartnerByXY",1384,G__MyCellMgrDict_248_0_13, 117, G__get_linked_tagnum(&G__MyCellMgrDictLN_TString), -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - X2 f - 'Float_t' 0 - Y2 "
"l - 'Long_t' 0 - runnum", "Given photon impact point (X2,Y2), return the name ", (void*) NULL, 0);
   G__memfunc_setup("GetPartnerByEtaPhi",1778,G__MyCellMgrDict_248_0_14, 117, G__get_linked_tagnum(&G__MyCellMgrDictLN_TString), -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - Eta2 f - 'Float_t' 0 - Phi2 "
"l - 'Long_t' 0 - runnum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAdcSpectrum",1403,G__MyCellMgrDict_248_0_15, 85, G__get_linked_tagnum(&G__MyCellMgrDictLN_TH1F), -1, 0, 1, 1, 1, 0, "l - 'Long_t' 0 - runnum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLEDSpectrum",1352,G__MyCellMgrDict_248_0_16, 85, G__get_linked_tagnum(&G__MyCellMgrDictLN_TH1F), -1, 0, 1, 1, 1, 0, "l - 'Long_t' 0 - runnum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLEDvsEvt",1037,G__MyCellMgrDict_248_0_17, 85, G__get_linked_tagnum(&G__MyCellMgrDictLN_TH2F), -1, 0, 1, 1, 1, 0, "l - 'Long_t' 0 - runnum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNth",586,G__MyCellMgrDict_248_0_18, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"l - 'Long_t' 0 - runnum f - 'Float_t' 0 - threshold", "return # of triggers over threshold", (void*) NULL, 0);
   G__memfunc_setup("GetStatusBit",1219,G__MyCellMgrDict_248_0_19, 98, -1, G__defined_typename("UChar_t"), 0, 1, 1, 1, 0, "l - 'Long_t' 0 - runnum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGain",671,G__MyCellMgrDict_248_0_20, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGainCor",963,G__MyCellMgrDict_248_0_21, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRunDepArray",1389,G__MyCellMgrDict_248_0_22, 85, G__get_linked_tagnum(&G__MyCellMgrDictLN_TObjArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetName",673,(G__InterfaceMethod) NULL,67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Legal",485,G__MyCellMgrDict_248_0_25, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - iew i - 'Int_t' 0 - nstb "
"i - 'Int_t' 0 - row0 i - 'Int_t' 0 - col0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNstb",707,G__MyCellMgrDict_248_0_26, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nstb", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRow",612,G__MyCellMgrDict_248_0_27, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - row", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCol",586,G__MyCellMgrDict_248_0_28, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCellWidthXY",1373,G__MyCellMgrDict_248_0_29, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - wx f - 'Float_t' 0 - wy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCellEtaPhi",1255,G__MyCellMgrDict_248_0_30, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - eta f - 'Float_t' 0 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetGain",683,G__MyCellMgrDict_248_0_31, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'CalibStr' - 0 - gain", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetGainCor",975,G__MyCellMgrDict_248_0_32, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'CalibStr' - 0 - gcor", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetGeom",692,G__MyCellMgrDict_248_0_33, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'Geom' - 0 - geom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStatusBit",1231,G__MyCellMgrDict_248_0_34, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"l - 'Long_t' 0 - runnum b - 'UChar_t' 0 - status", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitMyCellRunDep",1576,G__MyCellMgrDict_248_0_35, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "l - 'Long_t' 0 - runnum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InsertMyCellRunDep",1801,G__MyCellMgrDict_248_0_36, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'MyCellRunDep' - 0 - mCellrun", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MyCellMgrDict_248_0_37, 85, G__get_linked_tagnum(&G__MyCellMgrDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyCell::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MyCellMgrDict_248_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyCell::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MyCellMgrDict_248_0_39, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyCell::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MyCellMgrDict_248_0_40, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyCell::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MyCellMgrDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MyCellMgrDict_248_0_44, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MyCellMgrDict_248_0_45, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyCell::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MyCellMgrDict_248_0_46, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyCell::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MyCellMgrDict_248_0_47, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyCell::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MyCellMgrDict_248_0_48, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyCell::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyCell", 582, G__MyCellMgrDict_248_0_49, (int) ('i'), G__get_linked_tagnum(&G__MyCellMgrDictLN_MyCell), -1, 0, 1, 1, 1, 0, "u 'MyCell' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyCell", 708, G__MyCellMgrDict_248_0_50, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MyCellMgrDict_248_0_51, (int) ('u'), G__get_linked_tagnum(&G__MyCellMgrDictLN_MyCell), -1, 1, 1, 1, 1, 0, "u 'MyCell' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyCellRunDep(void) {
   /* MyCellRunDep */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MyCellMgrDictLN_MyCellRunDep));
   G__memfunc_setup("MyCellRunDep",1172,G__MyCellMgrDict_249_0_1, 105, G__get_linked_tagnum(&G__MyCellMgrDictLN_MyCellRunDep), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MyCellRunDep",1172,G__MyCellMgrDict_249_0_2, 105, G__get_linked_tagnum(&G__MyCellMgrDictLN_MyCellRunDep), -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPionSample",1304,G__MyCellMgrDict_249_0_3, 85, G__get_linked_tagnum(&G__MyCellMgrDictLN_TTree), -1, 0, 1, 1, 1, 0, "u 'TCut' - 0 - cuts", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAdcSpectrum",1403,G__MyCellMgrDict_249_0_4, 85, G__get_linked_tagnum(&G__MyCellMgrDictLN_TH1F), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLEDSpectrum",1352,G__MyCellMgrDict_249_0_5, 85, G__get_linked_tagnum(&G__MyCellMgrDictLN_TH1F), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLEDvsEvt",1037,G__MyCellMgrDict_249_0_6, 85, G__get_linked_tagnum(&G__MyCellMgrDictLN_TH2F), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRunNumber",1214,G__MyCellMgrDict_249_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStatusBit",1219,G__MyCellMgrDict_249_0_8, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMyCellEvt",1173,G__MyCellMgrDict_249_0_9, 85, G__get_linked_tagnum(&G__MyCellMgrDictLN_MyCellEvt), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetName",673,(G__InterfaceMethod) NULL,67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetMyCellEvt",1185,G__MyCellMgrDict_249_0_11, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'MyCellEvt' - 0 - mycevt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetName",685,G__MyCellMgrDict_249_0_12, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStatusBit",1231,G__MyCellMgrDict_249_0_13, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - status", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPionSample",1316,G__MyCellMgrDict_249_0_14, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TTree' - 0 - Trpi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitTree",804,G__MyCellMgrDict_249_0_15, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'MyCellEvt' - 0 - mycevt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__MyCellMgrDict_249_0_17, 85, G__get_linked_tagnum(&G__MyCellMgrDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyCellRunDep::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MyCellMgrDict_249_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyCellRunDep::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MyCellMgrDict_249_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyCellRunDep::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MyCellMgrDict_249_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyCellRunDep::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MyCellMgrDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MyCellMgrDict_249_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MyCellMgrDict_249_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyCellRunDep::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MyCellMgrDict_249_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyCellRunDep::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MyCellMgrDict_249_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyCellRunDep::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MyCellMgrDict_249_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyCellRunDep::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyCellRunDep", 1172, G__MyCellMgrDict_249_0_29, (int) ('i'), G__get_linked_tagnum(&G__MyCellMgrDictLN_MyCellRunDep), -1, 0, 1, 1, 1, 0, "u 'MyCellRunDep' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyCellRunDep", 1298, G__MyCellMgrDict_249_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MyCellMgrDict_249_0_31, (int) ('u'), G__get_linked_tagnum(&G__MyCellMgrDictLN_MyCellRunDep), -1, 1, 1, 1, 1, 0, "u 'MyCellRunDep' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyCellEvt(void) {
   /* MyCellEvt */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MyCellMgrDictLN_MyCellEvt));
   G__memfunc_setup("MyCellEvt",885,G__MyCellMgrDict_250_0_1, 105, G__get_linked_tagnum(&G__MyCellMgrDictLN_MyCellEvt), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MyCellMgrDict_250_0_2, 85, G__get_linked_tagnum(&G__MyCellMgrDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyCellEvt::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MyCellMgrDict_250_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyCellEvt::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MyCellMgrDict_250_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyCellEvt::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MyCellMgrDict_250_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyCellEvt::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MyCellMgrDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MyCellMgrDict_250_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MyCellMgrDict_250_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyCellEvt::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MyCellMgrDict_250_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyCellEvt::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MyCellMgrDict_250_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyCellEvt::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MyCellMgrDict_250_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyCellEvt::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyCellEvt", 885, G__MyCellMgrDict_250_0_14, (int) ('i'), G__get_linked_tagnum(&G__MyCellMgrDictLN_MyCellEvt), -1, 0, 1, 1, 1, 0, "u 'MyCellEvt' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyCellEvt", 1011, G__MyCellMgrDict_250_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MyCellMgrDict_250_0_16, (int) ('u'), G__get_linked_tagnum(&G__MyCellMgrDictLN_MyCellEvt), -1, 1, 1, 1, 1, 0, "u 'MyCellEvt' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyCellMgr(void) {
   /* MyCellMgr */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MyCellMgrDictLN_MyCellMgr));
   G__memfunc_setup("MyCellMgr",876,G__MyCellMgrDict_255_0_1, 105, G__get_linked_tagnum(&G__MyCellMgrDictLN_MyCellMgr), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MyCellMgr",876,G__MyCellMgrDict_255_0_2, 105, G__get_linked_tagnum(&G__MyCellMgrDictLN_MyCellMgr), -1, 0, 3, 1, 1, 0, 
"l - 'Long_t' 0 - runnum C - - 10 - Outname "
"C - - 10 - option", "a list of runs that need to be filled into MyCell objects", (void*) NULL, 0);
   G__memfunc_setup("InitFiles",903,G__MyCellMgrDict_255_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitMyCells",1101,G__MyCellMgrDict_255_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", "initialize MyCellsArray", (void*) NULL, 0);
   G__memfunc_setup("ReadADC",580,G__MyCellMgrDict_255_0_5, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"C - - 10 - adcdir g - 'Bool_t' 0 - write", "populates the adc/LED spectrum for all MyCellRunDep object in all MyCell", (void*) NULL, 0);
   G__memfunc_setup("ReadOutput",1037,G__MyCellMgrDict_255_0_6, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"C - - 10 - ofdir u 'TCut' - 0 - cuts "
"g - 'Bool_t' 0 - write", "populates the pion sample", (void*) NULL, 0);
   G__memfunc_setup("SetCellStatus",1328,G__MyCellMgrDict_255_0_7, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - LedBadTh i - 'Int_t' 0 - AveLEDRate "
"g - 'Bool_t' 0 - write", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPointXY",987,G__MyCellMgrDict_255_0_8, 105, -1, G__defined_typename("Int_t"), 0, 5, 1, 1, 0, 
"f - 'Float_t' 0 - eta f - 'Float_t' 0 - phi "
"f - 'Float_t' 1 - x f - 'Float_t' 1 - y "
"i - 'Int_t' 1 - nstb", "given eta/phi, calculate x, y coordinates and nstb", (void*) NULL, 0);
   G__memfunc_setup("GetPartnerByXY",1384,G__MyCellMgrDict_255_0_9, 85, G__get_linked_tagnum(&G__MyCellMgrDictLN_MyCellRunDep), -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - x2 f - 'Float_t' 0 - y2 "
"l - 'Long_t' 0 - runnum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrigRate",1090,G__MyCellMgrDict_255_0_10, 105, -1, G__defined_typename("Int_t"), 0, 6, 1, 1, 0, 
"l - 'Long_t' 0 - runnum i - 'Int_t' 0 - threshold "
"F - 'Float_t' 0 - AveRate F - 'Float_t' 0 - RateSpread "
"1 - 'Int_t (*)[34][17]' 0 - TrigRate g - 'Bool_t' 0 - write", "calculate average trigger rate, and rate of each cell", (void*) NULL, 0);
   G__memfunc_setup("InsertMyCell",1211,G__MyCellMgrDict_255_0_11, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'MyCell' - 0 - mycell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCell",672,G__MyCellMgrDict_255_0_12, 85, G__get_linked_tagnum(&G__MyCellMgrDictLN_MyCell), -1, 0, 1, 1, 1, 0, "C - - 10 - cname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteCellArray",1418,G__MyCellMgrDict_255_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Legal",485,G__MyCellMgrDict_255_0_14, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - iew i - 'Int_t' 0 - nstb "
"i - 'Int_t' 0 - row0 i - 'Int_t' 0 - col0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitRunDep",994,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "l - 'Long_t' 0 - runnum", "initialize", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MyCellMgrDict_255_0_16, 85, G__get_linked_tagnum(&G__MyCellMgrDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyCellMgr::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MyCellMgrDict_255_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyCellMgr::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MyCellMgrDict_255_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyCellMgr::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MyCellMgrDict_255_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyCellMgr::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__MyCellMgrDict_255_0_20, 85, G__get_linked_tagnum(&G__MyCellMgrDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MyCellMgrDict_255_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MyCellMgrDict_255_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MyCellMgrDict_255_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MyCellMgrDict_255_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyCellMgr::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MyCellMgrDict_255_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyCellMgr::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MyCellMgrDict_255_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyCellMgr::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MyCellMgrDict_255_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyCellMgr::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyCellMgr", 876, G__MyCellMgrDict_255_0_28, (int) ('i'), G__get_linked_tagnum(&G__MyCellMgrDictLN_MyCellMgr), -1, 0, 1, 1, 1, 0, "u 'MyCellMgr' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyCellMgr", 1002, G__MyCellMgrDict_255_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MyCellMgrDict_255_0_30, (int) ('u'), G__get_linked_tagnum(&G__MyCellMgrDictLN_MyCellMgr), -1, 1, 1, 1, 1, 0, "u 'MyCellMgr' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncMyCellMgrDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {
}

static void G__cpp_setup_global5() {
}

static void G__cpp_setup_global6() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalMyCellMgrDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
  G__cpp_setup_global5();
  G__cpp_setup_global6();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcMyCellMgrDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__MyCellMgrDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__MyCellMgrDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__MyCellMgrDictLN_TDirectory = { "TDirectory" , 99 , -1 };
G__linked_taginfo G__MyCellMgrDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__MyCellMgrDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__MyCellMgrDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR = { "vector<unsigned int,allocator<unsigned int> >" , 99 , -1 };
G__linked_taginfo G__MyCellMgrDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__MyCellMgrDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MyCellMgrDictLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__MyCellMgrDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__MyCellMgrDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__MyCellMgrDictLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__MyCellMgrDictLN_vectorlETStringcOallocatorlETStringgRsPgR = { "vector<TString,allocator<TString> >" , 99 , -1 };
G__linked_taginfo G__MyCellMgrDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TString,allocator<TString> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MyCellMgrDictLN_TCut = { "TCut" , 99 , -1 };
G__linked_taginfo G__MyCellMgrDictLN_MyCell = { "MyCell" , 99 , -1 };
G__linked_taginfo G__MyCellMgrDictLN_MyCellRunDep = { "MyCellRunDep" , 99 , -1 };
G__linked_taginfo G__MyCellMgrDictLN_MyCellEvt = { "MyCellEvt" , 99 , -1 };
G__linked_taginfo G__MyCellMgrDictLN_CalibStr = { "CalibStr" , 99 , -1 };
G__linked_taginfo G__MyCellMgrDictLN_Geom = { "Geom" , 99 , -1 };
G__linked_taginfo G__MyCellMgrDictLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__MyCellMgrDictLN_MyCellMgr = { "MyCellMgr" , 99 , -1 };
G__linked_taginfo G__MyCellMgrDictLN_TH1F = { "TH1F" , 99 , -1 };
G__linked_taginfo G__MyCellMgrDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__MyCellMgrDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__MyCellMgrDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__MyCellMgrDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__MyCellMgrDictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__MyCellMgrDictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__MyCellMgrDictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__MyCellMgrDictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__MyCellMgrDictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__MyCellMgrDictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__MyCellMgrDictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__MyCellMgrDictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__MyCellMgrDictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__MyCellMgrDictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__MyCellMgrDictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__MyCellMgrDictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__MyCellMgrDictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__MyCellMgrDictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__MyCellMgrDictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__MyCellMgrDictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__MyCellMgrDictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__MyCellMgrDictLN_TH2F = { "TH2F" , 99 , -1 };
G__linked_taginfo G__MyCellMgrDictLN_TGraph = { "TGraph" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableMyCellMgrDict() {
  G__MyCellMgrDictLN_TClass.tagnum = -1 ;
  G__MyCellMgrDictLN_TBuffer.tagnum = -1 ;
  G__MyCellMgrDictLN_TDirectory.tagnum = -1 ;
  G__MyCellMgrDictLN_TMemberInspector.tagnum = -1 ;
  G__MyCellMgrDictLN_TObject.tagnum = -1 ;
  G__MyCellMgrDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR.tagnum = -1 ;
  G__MyCellMgrDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__MyCellMgrDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MyCellMgrDictLN_TObjArray.tagnum = -1 ;
  G__MyCellMgrDictLN_TString.tagnum = -1 ;
  G__MyCellMgrDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__MyCellMgrDictLN_TFile.tagnum = -1 ;
  G__MyCellMgrDictLN_vectorlETStringcOallocatorlETStringgRsPgR.tagnum = -1 ;
  G__MyCellMgrDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MyCellMgrDictLN_TCut.tagnum = -1 ;
  G__MyCellMgrDictLN_MyCell.tagnum = -1 ;
  G__MyCellMgrDictLN_MyCellRunDep.tagnum = -1 ;
  G__MyCellMgrDictLN_MyCellEvt.tagnum = -1 ;
  G__MyCellMgrDictLN_CalibStr.tagnum = -1 ;
  G__MyCellMgrDictLN_Geom.tagnum = -1 ;
  G__MyCellMgrDictLN_TTree.tagnum = -1 ;
  G__MyCellMgrDictLN_MyCellMgr.tagnum = -1 ;
  G__MyCellMgrDictLN_TH1F.tagnum = -1 ;
  G__MyCellMgrDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__MyCellMgrDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__MyCellMgrDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__MyCellMgrDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__MyCellMgrDictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__MyCellMgrDictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__MyCellMgrDictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__MyCellMgrDictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__MyCellMgrDictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__MyCellMgrDictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__MyCellMgrDictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__MyCellMgrDictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__MyCellMgrDictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__MyCellMgrDictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__MyCellMgrDictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__MyCellMgrDictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__MyCellMgrDictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__MyCellMgrDictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__MyCellMgrDictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__MyCellMgrDictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__MyCellMgrDictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__MyCellMgrDictLN_TH2F.tagnum = -1 ;
  G__MyCellMgrDictLN_TGraph.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableMyCellMgrDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__MyCellMgrDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__MyCellMgrDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__MyCellMgrDictLN_TDirectory);
   G__get_linked_tagnum_fwd(&G__MyCellMgrDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__MyCellMgrDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__MyCellMgrDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR);
   G__get_linked_tagnum_fwd(&G__MyCellMgrDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__MyCellMgrDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MyCellMgrDictLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__MyCellMgrDictLN_TString);
   G__get_linked_tagnum_fwd(&G__MyCellMgrDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__MyCellMgrDictLN_TFile);
   G__get_linked_tagnum_fwd(&G__MyCellMgrDictLN_vectorlETStringcOallocatorlETStringgRsPgR);
   G__get_linked_tagnum_fwd(&G__MyCellMgrDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MyCellMgrDictLN_TCut);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MyCellMgrDictLN_MyCell),sizeof(MyCell),-1,324864,(char*)NULL,G__setup_memvarMyCell,G__setup_memfuncMyCell);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MyCellMgrDictLN_MyCellRunDep),sizeof(MyCellRunDep),-1,324864,(char*)NULL,G__setup_memvarMyCellRunDep,G__setup_memfuncMyCellRunDep);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MyCellMgrDictLN_MyCellEvt),sizeof(MyCellEvt),-1,292096,(char*)NULL,G__setup_memvarMyCellEvt,G__setup_memfuncMyCellEvt);
   G__get_linked_tagnum_fwd(&G__MyCellMgrDictLN_CalibStr);
   G__get_linked_tagnum_fwd(&G__MyCellMgrDictLN_Geom);
   G__get_linked_tagnum_fwd(&G__MyCellMgrDictLN_TTree);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MyCellMgrDictLN_MyCellMgr),sizeof(MyCellMgr),-1,296192,(char*)NULL,G__setup_memvarMyCellMgr,G__setup_memfuncMyCellMgr);
   G__get_linked_tagnum_fwd(&G__MyCellMgrDictLN_TH1F);
   G__get_linked_tagnum_fwd(&G__MyCellMgrDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyCellMgrDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__MyCellMgrDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyCellMgrDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__MyCellMgrDictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyCellMgrDictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyCellMgrDictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyCellMgrDictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyCellMgrDictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyCellMgrDictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyCellMgrDictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyCellMgrDictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyCellMgrDictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyCellMgrDictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyCellMgrDictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyCellMgrDictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyCellMgrDictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyCellMgrDictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyCellMgrDictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyCellMgrDictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyCellMgrDictLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyCellMgrDictLN_TH2F);
   G__get_linked_tagnum_fwd(&G__MyCellMgrDictLN_TGraph);
}
extern "C" void G__cpp_setupMyCellMgrDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupMyCellMgrDict()");
  G__set_cpp_environmentMyCellMgrDict();
  G__cpp_setup_tagtableMyCellMgrDict();

  G__cpp_setup_inheritanceMyCellMgrDict();

  G__cpp_setup_typetableMyCellMgrDict();

  G__cpp_setup_memvarMyCellMgrDict();

  G__cpp_setup_memfuncMyCellMgrDict();
  G__cpp_setup_globalMyCellMgrDict();
  G__cpp_setup_funcMyCellMgrDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncMyCellMgrDict();
  return;
}
class G__cpp_setup_initMyCellMgrDict {
  public:
    G__cpp_setup_initMyCellMgrDict() { G__add_setup_func("MyCellMgrDict",(G__incsetup)(&G__cpp_setupMyCellMgrDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initMyCellMgrDict() { G__remove_setup_func("MyCellMgrDict"); }
};
G__cpp_setup_initMyCellMgrDict G__cpp_setup_initializerMyCellMgrDict;

